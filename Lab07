This lab was the roughest, meanest, and hardest lab in my opinion. Only the c grade here but with a few changes you could probably get the 
  A grade.

#include <avr/io.h>
#include <stdio.h>
#include <stdint.h>
#include <util/delay.h>
#include "lcd.h"

#define F_CPU 1000000UL
#define PUSHED 1
#define RIGHT_BUTTON ((PINA&_BV(PIN3)) >> 3)
#define LEFT_BUTTON ((PINA&_BV(PIN0)) >> 0)
#define CLEAR_BUTTON ((PINA&_BV(PIN1))>> 1)
#define LEFTMOST 0b00000001
#define RIGHTMOST 0b1000000000

enum states{left_serve, right_serve, moving_left, moving_right};
static FILE lcd_stdout=FDEV_SETUP_STREAM(lcd_putc,NULL,_FDEV_SETUP_WRITE);

void newstate(void);
void adjustLEDs(void);
void setLEDs(int, int);
void delayTime(int);
int main(void);

int leds = LEFTMOST;
int LScore = 0;
int RScore = 0;
int scoreChange = 1;
char state;

int main(void){
        lcd_init();
        stdout=&lcd_stdout;
        //lcd_iwrire(LCD_CLR);

        int delay = 300;

        DDRD = 0xFF;
        DDRA = 0x10;
        DDRC |= 0x03;
        PORTA |= 0x10;

        state = left_serve;

        while(1){

        if(LScore == 15 || RScore == 15 || CLEAR_BUTTON == PUSHED){
                LScore = 0;
                RScore = 0;
        }
        if(scoreChange){
                //lcd_iwrite(LCD_CLR);
                printf("Score: %d - %d", LScore, RScore);
                printf("        L   R");

                delay = 300;
                }
                newstate();
                adjustLEDs();
                setLEDs(leds, delay);

                if(delay > 175){
                        delay -= 5;
                }
        }
}
void newstate(void){
        if(LEFT_BUTTON == PUSHED){
                if(leds == LEFTMOST){
                        state = moving_right;
                        scoreChange = 0;
                }
                else{
                        state = right_serve;
                        RScore++;
                        scoreChange = 1;
                }
        }
        else if(RIGHT_BUTTON == PUSHED){
                if(leds == RIGHTMOST){
                        state = moving_left;
                        scoreChange = 0;
                }
                else{
                        state = left_serve;
                        LScore++;
                        scoreChange = 1;
                }
        }
        else if(leds == 0x00){
                if(state == moving_right){
                        state = left_serve;
                        LScore++;
                        scoreChange = 1;
                }
                else{
                        state = right_serve;
                        RScore++;
                        scoreChange = 1;
                }
        }
}
void adjustLEDs(void){
        switch(state){
                case moving_left:
                        leds >>= 1;
                        break;
                case moving_right:
                        leds <<= 1;
                        break;
                case left_serve:
                        leds = LEFTMOST;
                        break;
                case right_serve:
                        leds = RIGHTMOST;
                        break;
        }
        PORTD = ~leds;
}
void setLEDs(int leds, int ledDelay){
        PORTD = (~leds) & 0b0011111111; 
        PORTC = (PORTC & 0b11111100) | ((~leds) & 0b1100000000) >> 8;
        delayTime(ledDelay);
}
void delayTime(int time){
        while(time > 0){
                _delay_ms(1);
                time--;
        }
}
